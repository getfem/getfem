// ====================================================================
// Copyright 2009
// Yann COLLETTE
// This file is released into the public domain
// ====================================================================

sci_getfem_path = get_absolute_file_path('builder_gateway_c.sce');
getfem_path = '@GETFEM_INTERFACE_PATH@';
superlu_libs = '@SUPERLU_LIBS@';
mumps_libs = '@MUMPS_LIBS@'

// Functions extracted from getfem_interface.cc

Table = ['gf_workspace',               'sci_gf_scilab'; ...
         'gf_delete',                  'sci_gf_scilab'; ...
         'gf_eltm',                    'sci_gf_scilab'; ...
         'gf_geotrans',                'sci_gf_scilab'; ...
         'gf_geotrans_get',            'sci_gf_scilab'; ...
         'gf_integ',                   'sci_gf_scilab'; ...
         'gf_integ_get',               'sci_gf_scilab'; ...
         'gf_global_function',         'sci_gf_scilab'; ...
         'gf_global_function_get',     'sci_gf_scilab'; ...
         'gf_fem',                     'sci_gf_scilab'; ...
         'gf_fem_get',                 'sci_gf_scilab'; ...
         'gf_cvstruct_get',            'sci_gf_scilab'; ...
         'gf_mesher_object',           'sci_gf_scilab'; ...
         'gf_mesher_object_get',       'sci_gf_scilab'; ...
         'gf_mesh',                    'sci_gf_scilab'; ...
         'gf_mesh_get',                'sci_gf_scilab'; ...
         'gf_mesh_set',                'sci_gf_scilab'; ...
         'gf_mesh_fem',                'sci_gf_scilab'; ...
         'gf_mesh_fem_get',            'sci_gf_scilab'; ...
         'gf_mesh_fem_set',            'sci_gf_scilab'; ...
         'gf_mesh_im',                 'sci_gf_scilab'; ...
         'gf_mesh_im_get',             'sci_gf_scilab'; ...
         'gf_mesh_im_set',             'sci_gf_scilab'; ...
         'gf_mesh_im_data',            'sci_gf_scilab'; ...
         'gf_mesh_im_data_get',        'sci_gf_scilab'; ...
         'gf_mesh_im_data_set',        'sci_gf_scilab'; ...
         'gf_model',                   'sci_gf_scilab'; ...
         'gf_model_get',               'sci_gf_scilab'; ...
         'gf_model_set',               'sci_gf_scilab'; ...
         'gf_slice',                   'sci_gf_scilab'; ...
         'gf_slice_get',               'sci_gf_scilab'; ...
         'gf_slice_set',               'sci_gf_scilab'; ...
         'gf_levelset',                'sci_gf_scilab'; ...
         'gf_levelset_get',            'sci_gf_scilab'; ...
         'gf_levelset_set',            'sci_gf_scilab'; ...
         'gf_mesh_levelset',           'sci_gf_scilab'; ...
         'gf_mesh_levelset_get',       'sci_gf_scilab'; ...
         'gf_mesh_levelset_set',       'sci_gf_scilab'; ...
         'gf_asm',                     'sci_gf_scilab'; ...
         'gf_compute',                 'sci_gf_scilab'; ...
         'gf_precond',                 'sci_gf_scilab'; ...
         'gf_precond_get',             'sci_gf_scilab'; ...
         'gf_spmat',                   'sci_gf_scilab'; ...
         'gf_spmat_get',               'sci_gf_scilab'; ...
         'gf_spmat_set',               'sci_gf_scilab'; ...
         'gf_linsolve',                'sci_gf_scilab'; ...
         'gf_util',                    'sci_gf_scilab'; ...
         'gf_exit',                    'sci_gf_scilab'; ...
	 'gf_cont_struct_get',         'sci_gf_scilab'; ...
	 'gf_cont_struct',             'sci_gf_scilab'];

// Special functions added for matlab compatibility

Table = [Table; ...
	 'sp_luinc',   'sci_spluinc';   ...
	 'sp_lu',      'sci_splu';      ...
	 'sp_lusolve', 'sci_splusolve'; ...
	 'sp_cholinc', 'sci_spcholinc'; ...
	 'sp_chol',    'sci_spchol';    ...
	 'sp_chsolve', 'sci_spchsolve'; ...
	 'sp_cgne',    'sci_spcgne';    ...
	 'sp_cgs',     'sci_spcgs';     ...
	 'sp_gmres',   'sci_spgmres';   ...
	 'sp_mgcr',    'sci_spmgcr'];

Files = ['gfm_common.c','gfm_scilab.cpp','sci_spluinc.c','sci_spcholinc.c','sci_splu.c','sci_spchol.c', ...
         'sci_cgne.c','sci_cgs.c','sci_gmres.c','sci_mgcr.c','sci_spchsolve.c','sci_splusolve.c'];

Libraries = ['../../src/c/libsp_get'];

if getos()=='Windows' then
  getfem_path = pwd() + '\..\..\..\';
  
  // rebuild parameters.lib
  exec(path_builder + 'rebuild_lib_windows.sci');
  // We need to use Visual studio 10.0
  if win64() then
    machine = 'X64';
  else
    machine = 'X86';
  end
  status = rebuild_lib_windows(filtersd_path,'sparse_f',machine,'10.0');
  if ~status then
    printf('Error: problem while rebuilding parameters.lib\n');
    abort();
  end

  cflags = ' /I' + sci_getfem_path + ' /I' + sci_getfem_path + '/../../src/c';
  cflags = cflags + ' /I' + getfem_path + '/interface/src/' + ' /I' + getfem_path + '/src/getfem';
  cflags = cflags + ' /I' + SCI + '/../../include/scilab'; // For the binary distribution
  cflags = cflags + ' /D__USE_DEPRECATED_STACK_FUNCTIONS__';

  ldflags = getfem_path + 'msvc2010\Release\libgetfemint.lib ';
  ldflags = ldflags + getfem_path + 'msvc2010\Release\libgetfem.lib ';
  ldflags = ldflags + getfem_path + 'msvc2010\Release\superlu.lib ';
  if (isfile(getfem_path + 'msvc2010\qhull-2011.1\lib\qhullstatic.lib')) then
    ldflags = ldflags + getfem_path + 'msvc2010\qhull-2011.1\lib\qhullstatic.lib ';
  end
    
  ldflags = ldflags + ' sparse_f.lib ';

  // ldflags = ldflags + ' /NODEFAULTLIB:LIBCMT';
else
  cflags = ' -g -I' + sci_getfem_path + ' -I' + sci_getfem_path + ' -I' + sci_getfem_path + '/../../src/c';
  cflags = cflags + ' -I' + getfem_path + '/interface/src/' + ' -I' + getfem_path + '/src/getfem';
  cflags = cflags + ' -I' + SCI + '/../../include/scilab'; // For the binary distribution
  cflags = cflags + ' -D__USE_DEPRECATED_STACK_FUNCTIONS__';
  
  ldflags = sci_getfem_path + '/../../../.libs/libgetfemint.a ' + sci_getfem_path + '/../../../../../src/.libs/libgetfem.a ' + superlu_libs + ' ' + mumps_libs;
end

if ~isempty('@QHULL_LIBS@') & getos()~='Windows' then
  ldflags = ldflags + ' -L/usr/lib @QHULL_LIBS@';
end

tbx_build_gateway('scigetfem_c', Table, Files, sci_getfem_path, Libraries, ldflags, cflags);

clear tbx_build_gateway;
